// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Signature.Infra.ContextDB;

#nullable disable

namespace Signature.Infra.Migrations
{
    [DbContext(typeof(Connection))]
    [Migration("20250824192501_addSituationInSignature")]
    partial class addSituationInSignature
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Signature.Domain.Entities.Signature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("situation")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("Signature.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateRegistration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Signature.Domain.Entities.StudentSignature", b =>
                {
                    b.Property<Guid>("FKIdSignature")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FKIdStudent")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FKIdSignature", "FKIdStudent");

                    b.HasIndex("FKIdStudent");

                    b.ToTable("StudentsSignatures");
                });

            modelBuilder.Entity("Signature.Domain.Entities.Signature", b =>
                {
                    b.OwnsOne("Signature.Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("SignatureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SignatureId");

                            b1.ToTable("Signatures");

                            b1.WithOwner()
                                .HasForeignKey("SignatureId");
                        });

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("Signature.Domain.Entities.Student", b =>
                {
                    b.OwnsOne("Signature.Domain.ValueObjects.CPF", "CPF", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("Signature.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("CPF")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Signature.Domain.Entities.StudentSignature", b =>
                {
                    b.HasOne("Signature.Domain.Entities.Signature", "Signature")
                        .WithMany("StudentSignatures")
                        .HasForeignKey("FKIdSignature")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Signature.Domain.Entities.Student", "Student")
                        .WithMany("StudentSignatures")
                        .HasForeignKey("FKIdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signature");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Signature.Domain.Entities.Signature", b =>
                {
                    b.Navigation("StudentSignatures");
                });

            modelBuilder.Entity("Signature.Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentSignatures");
                });
#pragma warning restore 612, 618
        }
    }
}
